var searchIndex = JSON.parse('{\
"parquet2":{"doc":"","t":"QIQKLLALALAAACLLLLKALLLALLALAALLLALLAAFFFFFNNDEENNDNNNNNNNNNNNNDLLLLLLLLLLLLLLLLLLLLFLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLENNNEGEDEGEDGEDGDINENNNNNNNDNNNNNNNNNNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMNNNNNENNNNALLFLLAAALLLLFLALALLLLLAADSSIQIIQLLLLFFLLLLLKLLLLLLKKKDLLLFLLLLLLLLLLDLLFLLLLLLLLLLDLLFLLLLLLLLLLLDNDEDNFLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLFFFFNNEENNNNNNNGNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNDEDNDDIDDDDNKLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLMFLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLMMMMLLMMMLKLLLLMMMLLFMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDEDDDDDNEDNNNNMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLMMLLMLMLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLFLLLLLLLLLLLLLLLLLMLMMMMLLLLLLLLLMMLLLMLMLLLLMMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLDDENNDNEIDDNNNDNEEDNNLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLMLLLMMMKLLLMMMMKLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLMMMLLLLLLLMMLLLMMMLLLLLLLLLKLLLMMLLLMFFFLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMLLLLLLLDDDQNDQIGIDDDNEKLLLLLLLLLLLLLLLLLLLLLLMMFMFLLFLLLLLLLLLLLLKLLLLFFFFFLLLLLLLLLLLLLLALLLLLLLLLLLMFFFFFFFFFKLLLLLLLLLLLLLLLLLLLLLLLLLLFNNENDLLLLLLLLLMLLLLMLLLLLLLLAAMMLMLMLLMMLLLLLLLLLMLLMALLFNNNNNNNNNNNDNNEENNNNNNNNNNNNNENNNNNNNNNNNEEEEDNNNNNENNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLMLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMDDDDDIKLLLLLLLLLLLLLLLLLLLLLLLLLFMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMLKLLLLMMMMMLKLLLLMMMLLFLLLLLLLLLLLLLLLLLLLLLLLLQISFKFKFKDDDDDDGNNEDLLLLLLLLLLLLLLLLLLLLLLLFMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLFM","n":["Error","FallibleStreamingIterator","Item","advance","all","any","bloom_filter","by_ref","compression","count","deserialize","encoding","error","fallible_streaming_iterator","filter","find","for_each","fuse","get","indexes","map","map_err","map_ref","metadata","next","nth","page","position","read","schema","size_hint","skip","skip_while","statistics","take","take_while","types","write","hash_byte","hash_native","insert","is_in_set","read","Brotli","Brotli","BrotliLevel","Compression","CompressionOptions","Gzip","Gzip","GzipLevel","Lz4","Lz4","Lz4Raw","Lz4Raw","Lzo","Lzo","Snappy","Snappy","Uncompressed","Uncompressed","Zstd","Zstd","ZstdLevel","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","compress","compression_level","compression_level","compression_level","decompress","default","default","default","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","hash","hash","hash","hash","into","into","into","into","into","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_new","try_new","try_new","type_id","type_id","type_id","type_id","type_id","BinaryPageState","Bitmap","Bitmap","Bitmap","BooleanPageState","Casted","DefLevelsDecoder","FilteredHybridBitmapIter","FilteredHybridEncoded","FilteredHybridRleDecoderIter","FixedLenBinaryPageState","FixexBinaryIter","HybridDecoderBitmapIter","HybridEncoded","HybridRleBooleanIter","HybridRleDecoderIter","HybridRleIter","HybridRleRunsIterator","Levels","NativePageState","Optional","Optional","Optional","Optional","OptionalDictionary","OptionalDictionary","OptionalDictionary","OptionalValues","Repeated","Repeated","Required","Required","Required","Required","RequiredDictionary","RequiredDictionary","RequiredDictionary","Skipped","SliceFilteredIter","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_empty","is_empty","len","len","len","len","native_cast","new","new","new","new","new","new","next","next","next","next","next","next","number_of_elements","number_of_elements","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_new","try_new","try_new","try_new","try_new","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","is_set","length","length","offset","values","BitPacked","ByteStreamSplit","DeltaBinaryPacked","DeltaByteArray","DeltaLengthByteArray","Encoding","Plain","PlainDictionary","Rle","RleDictionary","bitpacked","borrow","borrow_mut","ceil8","clone","clone_into","delta_bitpacked","delta_byte_array","delta_length_byte_array","eq","equivalent","fmt","from","get_length","hash","hybrid_rle","into","plain_byte_array","to_owned","try_from","try_from","try_into","type_id","uleb128","zigzag_leb128","Decoder","LENGTH","LENGTH","Packed","Packed","Unpackable","Unpacked","Unpacked","borrow","borrow_mut","clone","clone_into","encode","encode_pack","fmt","from","into","into_iter","next","pack","size_hint","to_owned","try_from","try_into","try_new","type_id","unpack","zero","zero","Decoder","borrow","borrow_mut","consumed_bytes","encode","fmt","from","into","into_iter","next","size_hint","try_from","try_into","try_new","type_id","Decoder","borrow","borrow_mut","encode","fmt","from","into","into_iter","into_lengths","next","try_from","try_into","try_new","type_id","Decoder","borrow","borrow_mut","encode","fmt","from","into","into_iter","into_values","next","try_from","try_into","try_new","type_id","values","BitmapIter","Bitpacked","Decoder","HybridEncoded","HybridRleDecoder","Rle","bitpacked_encode","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","encode_bool","encode_u32","eq","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","into_iter","into_iter","into_iter","new","new","next","next","next","num_bits","size_hint","size_hint","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_new","type_id","type_id","type_id","type_id","BinaryIter","borrow","borrow_mut","fmt","from","into","into_iter","new","next","size_hint","try_from","try_into","type_id","decode","encode","decode","encode","Brotli","Err","Error","Feature","FeatureNotActive","FeatureNotSupported","Gzip","InvalidParameter","Lz4","Ok","OutOfSpec","Result","Snappy","WouldOverAllocate","Zstd","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","equivalent","fmt","fmt","fmt","from","from","from","from","from","from","from","from","hash","into","into","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Ascending","BooleanIndex","BoundaryOrder","ByteIndex","Descending","FilteredPage","FixedLenByteIndex","Index","Interval","NativeIndex","PageIndex","PageLocation","Unordered","as_any","as_any","as_any","as_any","as_any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","boundary_order","boundary_order","boundary_order","boundary_order","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","compressed_page_size","compute_rows","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","first_row_index","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hash","hash","indexes","indexes","indexes","indexes","into","into","into","into","into","into","into","into","into","length","length","max","min","new","new","null_count","num_rows","offset","partial_cmp","physical_type","physical_type","physical_type","physical_type","physical_type","primitive_type","primitive_type","primitive_type","read_from_in_protocol","read_from_in_protocol","select_pages","selected_rows","start","start","stream_from_in_protocol","stream_from_in_protocol","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write_to_out_protocol","write_to_out_stream_protocol","ColumnChunkMetaData","ColumnDescriptor","ColumnOrder","Descriptor","FileMetaData","KeyValue","RowGroupMetaData","SchemaDescriptor","Signed","SortOrder","ThriftFileMetaData","TypeDefinedOrder","Undefined","Undefined","Unsigned","base_type","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_range","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","column_chunk","column_encoding","column_order","column_orders","column_orders","columns","columns","compressed_size","compressed_size","compression","created_by","created_by","data_page_offset","descriptor","descriptor","dictionary_page_offset","encryption_algorithm","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fields","file_offset","file_path","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","footer_signing_key_metadata","from","from","from","from","from","from","from","from","from","from","get_sort_order","has_index_page","hash","hash","hash","index_page_offset","into","into","into","into","into","into","into","into","into","into","into_thrift","into_thrift","key","key_value_metadata","key_value_metadata","key_value_metadata","max_def_level","max_rep_level","metadata","name","new","new","new","new","new","new","num_rows","num_rows","num_rows","num_values","partial_cmp","partial_cmp","path_in_schema","physical_type","primitive_type","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","row_groups","row_groups","schema","schema","schema_descr","sort_order","statistics","stream_from_in_protocol","stream_from_in_protocol","stream_from_in_protocol","stream_from_in_protocol","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","total_byte_size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_message","try_from_thrift","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uncompressed_size","value","version","version","write_to_out_protocol","write_to_out_protocol","write_to_out_stream_protocol","write_to_out_stream_protocol","CompressedDataPage","CompressedDictPage","CompressedPage","Data","Data","DataPage","DataPage","DataPageHeader","DataPageHeaderExt","DataPageHeaderV1","DataPageHeaderV2","DataPageV2","Dict","Dict","DictPage","DictionaryPage","Page","PageType","ParquetPageHeader","V1","V2","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","buffer","buffer_mut","buffer_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","compressed_page_size","compressed_size","compression","compression","crc","data_page_header","data_page_header_v2","definition_level_encoding","definition_level_encoding","definition_level_encoding","definition_level_encoding","definition_level_encoding","definition_levels_byte_length","descriptor","dictionary_page_header","encoding","encoding","encoding","encoding","encoding","encoding","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","header","header","index_page_header","into","into","into","into","into","into","into","into","into","into","into","is_compressed","is_compressed","is_sorted","is_sorted","new","new","new","new","new","new","new","num_nulls","num_rows","num_values","num_values","num_values","num_values","num_values","num_values","partial_cmp","partial_cmp","partial_cmp","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","repetition_level_encoding","repetition_level_encoding","repetition_level_encoding","repetition_level_encoding","repetition_level_encoding","repetition_levels_byte_length","select_rows","selected_rows","selected_rows","selected_rows","split_buffer","split_buffer_v1","split_buffer_v2","statistics","statistics","statistics","statistics","stream_from_in_protocol","stream_from_in_protocol","stream_from_in_protocol","stream_from_in_protocol","stream_from_in_protocol","stream_from_in_protocol","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uncompressed_page_size","uncompressed_size","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_stream_protocol","write_to_out_stream_protocol","write_to_out_stream_protocol","BasicDecompressor","ColumnIterator","Decompressor","Error","Finished","IndexedPageReader","Item","MutStreamingIterator","PageFilter","PageIterator","PageMetaData","PageReader","ReadColumnIterator","Some","State","advance","advance","advance","advance","advance","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","column_start","compression","decompress","descriptor","deserialize_metadata","eq","equivalent","filter_row_groups","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","get","get","get","get","get","get_column_iterator","get_field_columns","get_page_iterator","get_page_stream","get_page_stream_from_column_start","into","into","into","into","into","into","into","into","into_buffers","into_inner","into_inner","into_inner","into_iter","into_iter","levels","new","new","new","new","new","new","new","new_with_page_meta","new_with_page_meta","next","next","num_values","read_column","read_column_async","read_columns","read_columns_async","read_columns_indexes","read_metadata","read_metadata_async","read_metadata_with_size","read_pages_locations","swap_buffer","swap_buffer","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","get_bit_width","Optional","Repeated","Repetition","Required","SchemaElement","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","converted_type","eq","eq","equivalent","equivalent","field_id","fmt","fmt","from","from","hash","hash","into","into","io_message","io_thrift","logical_type","name","new","num_children","partial_cmp","precision","read_from_in_protocol","read_from_in_protocol","repetition_type","scale","stream_from_in_protocol","stream_from_in_protocol","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","type_","type_id","type_id","type_length","types","write_to_out_protocol","write_to_out_stream_protocol","from_message","Boolean","Bson","Bson","ByteArray","Date","Date","Decimal","Decimal","Double","Enum","Enum","FieldInfo","FixedLenByteArray","Float","GroupConvertedType","GroupLogicalType","GroupType","Int16","Int16","Int32","Int32","Int32","Int64","Int64","Int64","Int8","Int8","Int96","Integer","IntegerType","Interval","Json","Json","List","List","Map","Map","MapKeyValue","Microseconds","Milliseconds","Nanoseconds","ParquetType","PhysicalType","PrimitiveConvertedType","PrimitiveLogicalType","PrimitiveType","PrimitiveType","String","Time","TimeMicros","TimeMillis","TimeUnit","Timestamp","TimestampMicros","TimestampMillis","UInt16","UInt32","UInt64","UInt8","Uint16","Uint32","Uint64","Uint8","Unknown","Utf8","Uuid","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_contains","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","converted_type","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","field_info","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_converted","from_group","from_physical","from_physical","get_field_info","hash","hash","hash","hash","hash","hash","hash","hash","hash","id","into","into","into","into","into","into","into","into","into","into","logical_type","name","name","physical_type","repetition","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_primitive","try_from_thrift","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","converted_type","field_info","fields","logical_type","is_adjusted_to_utc","is_adjusted_to_utc","unit","unit","BinaryStatistics","BooleanStatistics","FixedLenStatistics","ParquetStatistics","PrimitiveStatistics","Statistics","as_any","as_any","as_any","as_any","as_any","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","deserialize_statistics","distinct_count","distinct_count","distinct_count","distinct_count","distinct_count","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","into","into","into","into","into","max","max_value","max_value","max_value","max_value","max_value","min","min_value","min_value","min_value","min_value","min_value","new","null_count","null_count","null_count","null_count","null_count","null_count","null_count","null_count","null_count","null_count","partial_cmp","physical_type","physical_type","physical_type","physical_type","physical_type","primitive_type","primitive_type","primitive_type","read_from_in_protocol","read_from_in_protocol","serialize_statistics","stream_from_in_protocol","stream_from_in_protocol","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","write_to_out_protocol","write_to_out_stream_protocol","Bytes","NativeType","TYPE","decode","from_le_bytes","int96_to_i64_ns","ord","ord_binary","to_le_bytes","ColumnOffsetsMetadata","Compressor","DynIter","DynStreamingIterator","FileStreamer","FileWriter","RowGroupIter","V1","V2","Version","WriteOptions","advance","advance","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calc_row_group_file_offset","clone","clone","clone_into","clone_into","compress","data_page_offset","dictionary_page_offset","end","end","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from","from","from","from","from","from","from_column_chunk","from_column_chunk_metadata","get","get","hash","hash","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner_and_metadata","into_iter","metadata","new","new","new","new","new","new_from_vec","next","options","options","schema","schema","size_hint","size_hint","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version","write","write","write_metadata_sidecar","write_statistics"],"q":[[0,"parquet2"],[38,"parquet2::bloom_filter"],[43,"parquet2::compression"],[147,"parquet2::deserialize"],[351,"parquet2::deserialize::FilteredHybridEncoded"],[356,"parquet2::encoding"],[391,"parquet2::encoding::bitpacked"],[420,"parquet2::encoding::delta_bitpacked"],[435,"parquet2::encoding::delta_byte_array"],[449,"parquet2::encoding::delta_length_byte_array"],[464,"parquet2::encoding::hybrid_rle"],[528,"parquet2::encoding::plain_byte_array"],[541,"parquet2::encoding::uleb128"],[543,"parquet2::encoding::zigzag_leb128"],[545,"parquet2::error"],[593,"parquet2::indexes"],[780,"parquet2::metadata"],[998,"parquet2::page"],[1229,"parquet2::read"],[1360,"parquet2::read::levels"],[1361,"parquet2::schema"],[1417,"parquet2::schema::io_message"],[1418,"parquet2::schema::types"],[1645,"parquet2::schema::types::ParquetType"],[1649,"parquet2::schema::types::PrimitiveLogicalType"],[1653,"parquet2::statistics"],[1777,"parquet2::types"],[1786,"parquet2::write"],[1903,"core::result"],[1904,"core::marker"],[1905,"core::ops::function"],[1906,"fallible_streaming_iterator"],[1907,"core::option"],[1908,"fallible_streaming_iterator"],[1909,"std::io"],[1910,"std::io"],[1911,"core::fmt"],[1912,"core::fmt"],[1913,"parquet_format_safe::parquet_format"],[1914,"core::any"],[1915,"core::clone"],[1916,"core::iter::traits::iterator"],[1917,"core::cmp"],[1918,"core::fmt"],[1919,"parquet_format_safe::parquet_format"],[1920,"alloc::collections"],[1921,"std::io::error"],[1922,"core::array"],[1923,"core::num::error"],[1924,"snap::error"],[1925,"alloc::string"],[1926,"core::any"],[1927,"parquet_format_safe::thrift::protocol::stream"],[1928,"core::future::future"],[1929,"alloc::alloc"],[1930,"alloc::boxed"],[1931,"core::pin"],[1932,"parquet_format_safe::parquet_format"],[1933,"parquet_format_safe::parquet_format"],[1934,"core::marker"],[1935,"parquet_format_safe::parquet_format"]],"d":["The error type of iteration.","A fallible, streaming iterator.","The type being iterated over.","Advances the iterator to the next position.","Determines if all elements of the iterator satisfy a …","Determines if any elements of the iterator satisfy a …","API to read and use bloom filters","Borrows an iterator, rather than consuming it.","Functionality to compress and decompress data according to …","Returns the number of remaining elements in the iterator.","","","Unofficial implementation of parquet IO in Rust. Contains […","","Returns an iterator which filters elements by a predicate.","Returns the first element of the iterator which satisfies …","Calls a closure on each element of an iterator.","Returns an iterator which is well-behaved at the beginning …","Returns the current element.","","Returns an iterator which applies a transform to elements.","Returns an iterator that applies a transform to errors.","Returns an iterator which applies a transform to elements.","","Advances the iterator, returning the next element.","Returns the <code>nth</code> element of the iterator.","","Returns the position of the first element matching a …","","","Returns bounds on the number of remaining elements in the …","Returns an iterator which skips the first <code>n</code> elements.","Returns an iterator which skips the first sequence of …","","Returns an iterator which only returns the first <code>n</code> …","Returns an iterator which only returns the first sequence …","","","(xxh64) hash of a sequence of bytes (e.g. ByteArray).","(xxh64) hash of a <code>NativeType</code>.","Inserts a new hash to the set","Returns whether the <code>hash</code> is in the set","Reads the bloom filter associated to <code>ColumnChunkMetaData</code> …","","","Represents a valid brotli compression level.","","Defines the compression settings for writing a parquet …","","","Represents a valid gzip compression level.","","","","","","","","","","","","","Represents a valid zstd compression level.","","","","","","","","","","","","","","","","","","","","","Compresses data stored in slice <code>input_buf</code> and writes the …","Returns the compression level.","Returns the compression level.","Returns the compression level.","Decompresses data stored in slice <code>input_buf</code> and writes …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Attempts to create a brotli compression level.","Attempts to create a gzip compression level.","Attempts to create a zstd compression level from a given …","","","","","","","a bitmap (values, offset, length, skipped_set)","a bitmap","When the maximum definition level is 1, the definition …","","Typedef of an iterator over PLAIN page values","Decoder of definition levels.","An <code>Iterator</code> adapter over <code>HybridEncoded</code> that yields …","The decoding state of the hybrid-RLE decoder with a …","Type definition of a <code>FilteredHybridBitmapIter</code> of …","","","Type definition for a <code>HybridRleIter</code> using …","The decoding state of the hybrid-RLE decoder with a …","An iterator adapter that maps an iterator of <code>HybridEncoded</code> …","Type definition for a <code>HybridRleBooleanIter</code> using …","An iterator of <code>HybridEncoded</code>, adapter over …","","When the maximum definition level is larger than 1","The deserialization state of a <code>DataPage</code> of <code>Primitive</code> …","","","","A page of optional values","","","A page of optional, dictionary-encoded values","Iterator adapter to convert an iterator of non-null values …","","A repeated item. The first attribute corresponds to …","","","","A page of required values","","","A page of required, dictionary-encoded values","When the run was skipped - contains the number of set …","An iterator adapter that converts an iterator over items …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the length of the run in number of items","Returns the number of elements remaining. Note that each …","Returns the length of the run in number of items","the number of elements in the iterator. Note that this <em>is </em>…","Views the values of the data page as <code>Casted</code> to <code>NativeType</code>.","","","Returns a new <code>HybridRleIter</code>","","","Return a new <code>SliceFilteredIter</code>","","","","","","","Number of elements remaining. This may not be the items of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to create <code>NativePageState</code>","","","","","","","","","","","","","","","","","","","","Bit packed encoding.  This can only be used if the data …","Encoding for floating-point data. K byte-streams are …","Delta encoding for integers. This can be used for int …","Incremental-encoded byte array. Prefix lengths are encoded …","Encoding for byte arrays to separate the length values and …","","Default encoding. BOOLEAN - 1 bit per value. 0 is false; 1 …","Deprecated: Dictionary encoding. The values in the …","Group packed run length encoding. Usable for …","Dictionary encoding: the ids are encoded using the RLE …","","","","Returns the ceil of value / 8","","","","","","","","","Returns the argument unchanged.","Panics","","","Calls <code>U::from(self)</code>.","","","","","","","","","An <code>Iterator</code> of <code>Unpackable</code> unpacked from a bitpacked slice …","","","A byte slice (e.g. <code>[u8; 8]</code>) denoting types that represent …","","A type representing a type that can be bitpacked and …","A byte slice of <code>Unpackable</code> denoting complete unpacked …","","","","","","Encodes (packs) a slice of <code>Unpackable</code> into bitpacked bytes …","Encodes (packs) a potentially incomplete pack of <code>Unpackable</code>…","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Returns a <code>Decoder</code> with <code>T</code> encoded in <code>packed</code> with <code>num_bits</code>.","","","","","Decoder of parquets’ <code>DELTA_BINARY_PACKED</code>. Implements …","","","Returns the total number of bytes consumed up to this …","Encodes an iterator of <code>i64</code> according to parquet’s …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Decodes according to Delta strings, prefixes, lengths and …","","","Encodes an iterator of according to DELTA_BYTE_ARRAY","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Decodes Delta-length byte array lengths and values.","","","Encodes a clonable iterator of <code>&amp;[u8]</code> into <code>buffer</code>. This …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Consumes this decoder and returns the slice of …","","","","","","Returns the slice of concatenated values.","An <code>Iterator</code> of bool that decodes a bitmap. This is a …","A bitpacked slice. The consumer must know its bit-width to …","An <code>Iterator</code> of <code>HybridEncoded</code>.","The two possible states of an RLE-encoded run.","<code>Iterator</code> of <code>u32</code> from a byte slice of Hybrid-RLE encoded …","A RLE-encoded slice. The first attribute corresponds to …","Writes an iterator of bools into writer, with LSB first.","","","","","","","","","","","","","","","the bitpacked part of the encoder.","RLE-hybrid encoding of <code>u32</code>. This currently only yields …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns a new <code>BitmapIter</code>.","Returns a new <code>Decoder</code>","","","","Returns the number of bits being used by this decoder.","","","","","","","","","","","","","","Returns a new <code>HybridRleDecoder</code>","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Encodes <code>value</code> in ULEB128 into <code>container</code>. The exact number …","","","Brotli compression and decompression","Contains the error value","Errors generated by this crate","List of features whose non-activation may cause a runtime …","Error presented when trying to use a code branch that …","Error presented when trying to use a feature from parquet …","Gzip compression and decompression","When encoding, the user passed an invalid parameter","Lz4 raw compression and decompression","Contains the success value","When the parquet file is known to be out of spec.","A specialized <code>Result</code> for Parquet errors.","Snappy compression and decompression","When decoding or decompressing, the page would allocate …","Zstd compression and decompression","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","An index of a column of boolean physical type","Enum to annotate whether lists of min/max elements inside …","An index of a column of bytes physical type","","An enum describing a page that was either selected in a …","An index of a column of fixed len byte physical type","Trait object representing a <code>ColumnIndex</code> in Rust’s native …","An interval","An index of a column of <code>NativeType</code> physical representation","The index of a page, containing the min and max values of …","","","","","","","","","","","","","","","","","","","","","","","","","","the order","","","","","","","","","","","","","","","","","","","","","","","Size of the page, including header. Sum of …","Returns the set of intervals <code>(start, len)</code> containing all …","","","","","","","","","","","","","","","","","","","","","Index within the RowGroup of the first row of the page; …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","The indexes, one item per page","The indexes, one item per page","The indexes, one item per page","The indexes, one item per page","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Its length","","The maximum value in the page. It is None when all values …","The minimum value in the page. It is None when all values …","","Create a new interal","The number of null values in the page","","Offset of the page in the file *","","","","","","","The primitive type","The <code>PrimitiveType</code>.","The <code>PrimitiveType</code>.","","","Given a set of selected Intervals of rows and the set of …","rows to select from the page","Its start","Location of the page in the file","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Metadata for a column chunk.","A descriptor for leaf-level primitive columns. This …","Column order that specifies what method was used to …","A descriptor of a parquet column. It contains the …","Metadata for a Parquet file.","Wrapper struct to store key values","Metadata for a row group.","A schema descriptor. This encapsulates the top-level …","Signed (either value or legacy byte-wise) comparison.","Sort order for page and column statistics.","Description for file metadata","Column uses the order defined by its logical or physical …","Undefined column order, means legacy behaviour before …","Comparison is undefined.","Unsigned (depending on physical type either value or …","The <code>ParquetType</code> this descriptor is a leaf of","","","","","","","","","","","","","","","","","","","","","Returns the offset and length in bytes of the column chunk …","","","","","","","","","","","","","","","","","","","","","","","Returns this column’s <code>ColumnChunk</code>","Returns the encoding for this column","Returns column order for <code>i</code>th column in this file. If …","Sort order used for the min_value and max_value fields in …","Column (sort) order used for <code>min</code> and <code>max</code> values of each …","Returns slice of column chunk metadata.","The <code>ColumnDescriptor</code> (leafs) of this schema.","Returns the total compressed data size of this column …","Total size of all compressed column data in this row group.","<code>Compression</code> for this column.","String for application that wrote this file.  This should …","String message for application that wrote this file.","Returns the offset for the column data.","The <code>ColumnDescriptor</code> for this column. This descriptor …","The descriptor this columns’ leaf.","Returns the offset for the dictionary page, if any.","Encryption algorithm. This field is set only in encrypted …","","","","","","","","","","","","The schemas’ fields.","Byte offset in <code>file_path()</code>.","File where the column chunk is stored.","","","","","","","","","","","Retrieval metadata of key used for signing the footer. …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns sort order for a physical/logical type.","Returns <code>true</code> if this column chunk contains a index page, …","","","","Returns the offset for the index page.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Method to convert to Thrift.","Serializes itself to thrift’s …","","returns the metadata","Optional key/value metadata *","key_value_metadata of this file.","The maximum definition level","The maximum repetition level","The column’s <code>ColumnMetaData</code>","The schemas’ name.","","","Returns a new <code>ColumnChunkMetaData</code>","Creates new descriptor for leaf-level column.","Create a new <code>RowGroupMetaData</code>","Creates new schema descriptor from Parquet schema.","Number of rows in this row group.","Number of rows in this file *","number of rows in the file.","Total number of values in this column chunk. Note that …","","","The path of this column. For instance, “a.b.c.d”.","The <code>PhysicalType</code> of this column.","The <code>PrimitiveType</code> of this column","","","","","Row groups in this file *","The row groups of this file","Returns the <code>SchemaDescriptor</code> that describes schema of this …","Parquet schema for this file.  This schema contains …","schema descriptor.","Returns sort order associated with this column order.","Decodes the raw statistics into <code>Statistics</code>.","","","","","","","","","","","","","","","Total byte size of all uncompressed column data in this …","","","","","","","","","","","Creates a schema from","Deserializes <code>crate::thrift_format::FileMetaData</code> into this …","","","","","","","","","","","","","","","","","","","","","Returns the total uncompressed data size of this column …","","Version of this file *","version of this file.","","","","","A <code>CompressedDataPage</code> is compressed, encoded representation …","A compressed, encoded dictionary page.","A <code>CompressedPage</code> is a compressed, encoded representation …","A <code>DataPage</code>","","A <code>DataPage</code> is an uncompressed, encoded representation of a …","","","","Data page header","New page format allowing reading levels without …","","A <code>DictPage</code>","","An uncompressed, encoded dictionary page.","","A <code>Page</code> is an uncompressed, encoded representation of a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a mutable reference to the internal buffer. Useful …","","","","","","","","","","","","","","","","","Compressed (and potentially encrypted) page size in bytes, …","","The compression of the data in this page. Note that what …","The compression of the data in this page.","The 32bit CRC for the page, to be be calculated as follows:","","","","","","","Encoding used for definition levels *","length of the definition levels","","","","","","","Encoding used for this data page *","Encoding used for data in this page *","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","whether the values are compressed. Which means the section …","","","","","","Returns a new <code>CompressedDataPage</code>.","","","","Number of NULL values, in this data page. Number of …","Number of rows in this data page. which means pages change …","","","","Number of values, including NULLs, in this data page. *","Number of values, including NULLs, in this data page. *","","","","","","","","","","","","","","","Encoding used for repetition levels *","length of the repetition levels","","the rows to be selected by this page. When <code>None</code>, all rows …","the rows to be selected by this page. When <code>None</code>, all rows …","","Splits the page buffer into 3 slices corresponding to …","Splits the page buffer into 3 slices corresponding to …","Splits the page buffer into 3 slices corresponding to …","Decodes the raw statistics into a statistics","Decodes the raw statistics into a statistics","Optional statistics for the data in this page*","optional statistics for the data in this page *","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","the type of the page: indicates which of the *_header …","","","","","","","","","","","","Uncompressed page size in bytes (not including this …","","","","","","","","A <code>FallibleStreamingIterator</code> that decompresses …","A <code>MutStreamingIterator</code> that reads column chunks one by one,","Decompressor that allows re-using the page buffer of …","","Iterator finished","A fallible <code>Iterator</code> of <code>CompressedPage</code>. This iterator …","","A special kind of fallible streaming iterator where <code>advance</code>…","Type declaration for a page filter","","This meta is a small part of <code>ColumnChunkMetaData</code>.","A fallible <code>Iterator</code> of <code>CompressedDataPage</code>. This iterator …","A <code>MutStreamingIterator</code> of pre-read column chunks","Iterator still has elements","State of <code>MutStreamingIterator</code>.","","","","","","","","","","","","","","","","","","","","","","","","The start offset of this column chunk in file.","Compression type","Decompresses the page, using <code>buffer</code> for decompression. If …","The descriptor of this parquet column","Parse loaded metadata bytes","","","Filters row group metadata to only those row groups, for …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Returns a <code>ColumnIterator</code> of column chunks corresponding to …","Returns all <code>ColumnChunkMetaData</code> associated to <code>field_name</code>. …","Returns a new <code>PageReader</code> by seeking <code>reader</code> to the begining …","Returns a stream of compressed data pages","Returns a stream of compressed data pages from a reader …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns two buffers: the first buffer corresponds to the …","Returns its internal buffer, consuming itself.","consumes self into the reader and the two internal buffers","Returns the reader and this Readers’ interval buffer","","","","Returns a new <code>ColumnIterator</code> <code>max_page_size</code> is the maximum …","Creates a new <code>Decompressor</code>.","Returns a new <code>BasicDecompressor</code>.","Returns a new <code>IndexedPageReader</code>.","Returns a new <code>PageReader</code>.","Returns a new <code>ReadColumnIterator</code>","Returns a new <code>PageMetaData</code>.","Returns a new <code>IndexedPageReader</code> with <code>PageMetaData</code>.","Create a a new <code>PageReader</code> with <code>PageMetaData</code>.","","","The number of values in this column chunk.","Reads a column chunk into memory This operation is …","Reads a single column chunk into memory asynchronously","Reads all columns that are part of the parquet field …","Reads all columns that are part of the parquet field …","Reads the column indexes of all <code>ColumnChunkMetaData</code> and …","Reads a <code>FileMetaData</code> from the reader, located at the end …","Asynchronously reads the files’ metadata","Reads a <code>FileMetaData</code> from the reader, located at the end …","Read <code>PageLocation</code>s from the <code>ColumnChunkMetaData</code>s. Returns …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of bits needed to store the given …","When the field may have null values","When the field may be repeated (list field)","The repetition of a parquet field","When the field has no null values","Represents a element inside a schema definition.","","","","","","","","","","DEPRECATED: When the schema is the result of a conversion …","","","","","When the original schema supports field ids, this will …","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","The logical type of this SchemaElement","Name of the field in the schema","","Nested fields.  Since thrift does not support nested …","","","","","repetition of the field. The root of the schema does not …","DEPRECATED: Used when this column contains decimal data. …","","","","","","","","","","Data type for this field. Not set if the current element …","","","If type is FIXED_LEN_BYTE_ARRAY, this is the byte length …","","","","Parses message type as string into a Parquet <code>ParquetType</code> …","","","An embedded BSON document","","","A Date","","A decimal value.","","","an enum is converted into a binary field","Common type information.","","","","","","","","","","","","","","","A signed integer value.","","","Enum of all valid logical integer types","An interval of time","","An embedded JSON document","","a list is converted into an optional field containing a …","","a map is converted as an optional field containing a …","a key/value pair is converted into a group of two fields","","","","Representation of a Parquet type describing primitive and …","The set of all physical types representable in Parquet","","","The complete description of a parquet column","","","","A time.","A time","","","A date/time combination","A date/time combination","","","","","","","","An unsigned integer value.","","","","","","","","","","","","","","","","","","","","","","","","Checks if <code>sub_type</code> schema is part of current schema. This …","","","","","","","","","","","","","","","","","","","","","The optional converted type","","","","","","","","","","","","","","","","","","","","The fields’ generic information","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Helper method to create an optional field with no logical …","Helper method to create a <code>ParquetType::PrimitiveType</code> …","Returns <code>FieldInfo</code> information about the type.","","","","","","","","","","the optional id, to select fields by id","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The optional logical type","Returns this type’s field name.","The field name","The physical type","The repetition","","","","","","","","","","","","","","","","","","","","","","","","","","Error","Method to convert from Thrift.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Statistics per row group and per page All fields are …","","A trait used to describe specific statistics. Each …","","","","","","","","","","","","","","","","","","","","","","","","","","","Deserializes a raw parquet statistics into <code>Statistics</code>.","count of distinct values occurring","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","DEPRECATED: min and max value of the column. Use min_value …","Min and max values for the column, determined by its …","","","","","","","","","","","","","","","","","count of null value in the column","","","","","","","","","","","","","","","","Serializes <code>Statistics</code> into a raw parquet statistics.","","","","","","","","","","","","","","","","","","","","","","","","","","A physical native representation of a Parquet fixed-sized …","","","","","","Returns the ordering of two binary values.","","","A <code>FallibleStreamingIterator</code> that consumes <code>Page</code> and yields …","<code>DynIter</code> is an implementation of a single-threaded, …","Dynamically-typed <code>FallibleStreamingIterator</code>.","An interface to write a parquet file asynchronously. Use …","An interface to write a parquet file. Use <code>start</code> to write …","","","","The parquet version to use","Write options of different interfaces on this crate","","","","","","","","","","","","","","","","","","","","","","","","Compresses an [<code>EncodedPage</code>] into a <code>CompressedPage</code> using …","","","Writes the footer of the parquet file. Returns the total …","Writes the footer of the parquet file. Returns the total …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Deconstructs itself into its iterator and scratch buffer.","Returns the underlying writer.","Returns the underlying writer.","Returns the underlying writer and <code>ThriftFileMetaData</code>","","Returns the <code>ThriftFileMetaData</code>. This is Some iff the …","Creates a new <code>Compressor</code>","Returns a new <code>FileWriter</code>.","Returns a new <code>FileStreamer</code>.","Returns a new <code>DynIter</code>, boxing the incoming iterator","Returns a new <code>DynStreamingIterator</code>, boxing the incoming …","Creates a new <code>Compressor</code> (same as <code>new</code>)","","The options assigned to the file","The options assigned to the file","The <code>SchemaDescriptor</code> assigned to this file","The <code>SchemaDescriptor</code> assigned to this file","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Which Parquet version to use","Writes a row group to the file.","Writes a row group to the file.","Writes a parquet file containing only the header and footer","Whether to write statistics, including indexes"],"i":[187,0,187,187,187,187,0,187,0,187,0,0,0,0,187,187,187,187,187,0,187,187,187,0,187,187,0,187,0,0,187,187,187,0,187,187,0,0,0,0,0,0,0,27,28,0,0,0,27,28,0,27,28,27,28,27,28,27,28,27,28,27,28,0,27,28,29,30,31,27,28,29,30,31,27,28,29,30,31,27,28,29,30,31,0,29,30,31,0,29,30,31,27,28,29,30,31,27,28,29,30,31,27,28,29,30,31,27,27,28,29,30,31,27,28,29,30,31,27,28,29,30,31,27,28,29,30,31,27,27,28,29,30,31,27,28,29,30,31,29,30,31,27,28,29,30,31,0,40,44,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,60,61,49,53,60,61,53,0,40,44,60,61,49,53,60,61,53,40,0,60,61,49,40,43,51,44,45,52,53,54,46,47,60,61,49,40,43,51,44,45,52,53,54,46,47,40,43,44,45,46,47,40,43,44,45,46,47,40,43,44,40,43,44,49,40,43,51,44,45,52,53,54,46,47,60,61,49,40,43,51,44,45,52,53,54,46,47,60,61,49,40,43,51,44,45,52,53,54,46,47,43,51,45,52,46,47,40,43,44,45,40,43,44,45,0,43,51,45,52,46,47,43,51,45,52,46,47,59,45,51,45,52,46,47,40,43,44,45,46,47,60,61,49,40,43,51,44,45,52,53,54,46,47,60,61,49,40,43,51,44,45,52,53,54,46,47,60,61,49,53,54,60,61,49,40,43,51,44,45,52,53,54,46,47,190,191,190,191,191,62,62,62,62,62,0,62,62,62,62,0,62,62,0,62,62,0,0,0,62,62,62,62,0,62,0,62,0,62,62,62,62,62,0,0,0,192,193,0,64,0,0,64,65,65,65,65,0,0,65,65,65,65,65,64,65,65,65,65,65,65,64,192,193,0,66,66,66,0,66,66,66,66,66,66,66,66,66,66,0,67,67,0,67,67,67,67,67,67,67,67,67,67,0,68,68,0,68,68,68,68,68,68,68,68,68,68,68,0,72,0,0,0,72,0,74,71,72,73,74,71,72,73,71,72,73,71,72,73,0,0,72,72,74,71,72,73,74,71,72,73,74,71,72,73,74,71,73,74,71,74,71,73,71,74,73,71,72,73,74,71,72,73,74,71,72,73,73,74,71,72,73,0,75,75,75,75,75,75,75,75,75,75,75,75,0,0,0,0,77,32,0,0,26,26,77,26,77,32,26,0,77,26,77,77,26,77,26,77,26,77,26,77,77,77,26,26,77,26,26,26,26,26,26,26,77,77,26,77,26,26,77,26,77,26,77,26,93,0,0,0,93,0,0,0,0,0,0,0,93,95,86,87,88,89,90,86,91,87,88,89,57,92,93,90,86,91,87,88,89,57,92,93,86,87,88,89,90,86,91,87,88,89,57,92,93,90,86,91,87,88,89,57,92,93,90,90,0,93,95,90,86,91,87,88,89,57,92,93,90,86,91,87,88,89,57,92,93,90,90,86,91,87,88,89,57,92,93,90,86,91,87,88,89,57,92,93,90,86,91,87,88,89,57,92,93,86,87,88,89,90,86,91,87,88,89,57,92,93,57,92,91,91,90,57,91,92,90,90,95,86,87,88,89,86,87,88,90,90,0,92,57,92,90,90,90,86,91,87,88,89,57,92,93,90,86,91,87,88,89,57,92,93,93,90,86,91,87,88,89,57,92,93,90,86,91,87,88,89,57,92,93,90,90,0,0,0,0,0,0,0,0,116,0,0,112,112,116,116,111,108,109,22,110,111,112,113,114,115,116,108,109,22,110,111,112,113,114,115,116,22,108,109,22,110,111,112,113,114,115,116,108,109,22,110,111,112,113,114,115,116,108,109,22,22,113,109,113,114,115,22,114,22,109,113,22,22,111,22,109,108,109,110,111,112,116,108,109,110,112,116,115,22,22,108,109,22,110,111,112,113,114,115,116,109,108,109,22,110,111,112,113,114,115,116,0,22,108,109,110,22,108,109,22,110,111,112,113,114,115,116,22,113,108,113,109,113,110,110,22,115,108,109,22,111,114,115,114,109,113,22,108,109,111,22,110,108,108,109,109,109,113,113,109,113,112,22,108,108,109,109,108,109,22,110,111,112,113,114,115,116,114,108,109,22,110,111,112,113,114,115,116,115,113,108,109,22,110,111,112,113,114,115,116,108,109,22,110,111,112,113,114,115,116,22,108,109,113,108,109,108,109,0,0,0,130,138,0,135,0,0,0,0,135,130,138,0,135,0,0,0,134,134,131,132,133,136,134,55,130,138,139,137,135,131,132,133,136,134,55,130,138,139,137,135,55,139,55,130,131,132,133,134,55,135,131,132,133,134,55,135,131,132,133,133,136,136,137,133,133,133,194,131,132,55,131,132,55,133,194,131,132,55,131,132,131,132,133,135,131,132,133,135,131,132,133,136,134,55,130,138,139,137,135,131,132,133,136,134,55,130,138,139,137,135,131,132,133,135,136,55,133,131,132,133,136,134,55,130,138,139,137,135,138,132,139,137,131,132,133,136,55,139,137,132,132,136,134,55,131,132,139,131,132,133,131,131,132,132,133,133,194,131,132,55,131,132,136,136,55,55,0,0,0,136,55,131,132,131,131,132,132,133,133,131,132,133,134,55,135,131,132,133,136,134,55,130,138,139,137,135,135,131,132,133,136,134,55,130,138,139,137,135,133,131,132,133,136,134,55,130,138,139,137,135,133,136,131,132,133,131,132,133,0,0,0,195,144,0,195,0,0,0,0,0,0,144,0,195,145,147,148,149,145,147,148,158,152,144,149,150,145,147,148,158,152,144,149,150,150,150,150,150,0,150,0,150,150,0,144,149,150,145,147,148,158,152,144,149,150,150,195,145,147,148,149,0,0,0,0,0,145,147,148,158,152,144,149,150,147,148,158,152,158,152,0,145,147,148,158,152,149,150,158,152,158,152,150,0,0,0,0,0,0,0,0,0,146,152,150,145,147,148,158,152,144,149,150,145,147,148,158,152,144,149,150,145,147,148,158,152,144,149,150,0,160,160,0,160,0,124,160,124,160,124,160,124,160,124,124,124,160,124,160,124,124,160,124,160,124,160,124,160,0,0,124,124,124,124,124,124,124,124,124,124,124,124,124,160,124,160,160,124,160,124,124,160,124,0,124,124,0,98,119,120,98,119,120,119,120,98,119,120,0,98,98,0,0,118,166,120,166,98,120,166,98,120,166,120,98,119,0,120,119,120,167,169,167,169,169,165,165,165,0,0,0,0,0,118,119,119,120,120,0,119,120,120,166,166,166,166,120,120,120,120,119,120,119,165,166,119,167,98,168,120,169,170,118,165,166,119,167,98,168,120,169,170,118,118,165,166,119,167,98,168,120,169,170,118,165,166,119,167,98,168,120,169,170,118,170,165,166,119,167,98,168,120,169,170,118,165,166,119,167,98,168,120,169,170,170,165,166,119,167,98,168,120,169,170,118,165,165,166,166,119,167,98,168,120,169,170,118,118,118,170,118,118,165,166,119,167,98,168,120,169,170,168,165,166,119,167,98,168,120,169,170,118,170,118,168,170,168,165,166,119,167,98,168,120,169,170,118,165,166,119,119,167,167,98,98,168,120,120,169,169,170,118,118,118,165,166,119,167,98,168,120,169,170,118,165,166,119,167,98,168,120,169,170,118,196,196,196,196,197,198,197,198,0,0,0,0,0,0,128,172,173,174,175,140,172,173,174,175,140,172,173,174,175,140,172,173,174,175,140,172,173,174,175,140,0,140,172,173,174,175,140,128,172,173,174,175,140,172,173,174,175,140,172,173,174,175,140,172,173,174,175,140,140,172,173,174,175,140,140,172,173,174,175,140,140,172,173,174,175,140,128,172,173,174,175,140,172,173,174,175,140,128,172,173,174,175,172,174,175,140,140,0,140,140,140,172,173,174,175,140,172,173,174,175,140,172,173,174,175,140,172,173,174,175,140,140,21,0,21,0,21,0,21,0,21,0,0,0,0,0,0,0,181,181,0,0,177,178,177,182,179,184,186,178,180,181,177,182,179,184,186,178,180,181,179,180,181,180,181,0,179,179,182,184,180,181,180,181,180,181,177,182,179,184,186,178,180,181,179,179,177,178,180,181,177,182,179,184,186,178,180,181,177,182,184,182,186,182,177,182,184,186,178,177,186,182,184,182,184,186,178,180,181,177,182,179,184,186,178,180,181,177,182,179,184,186,178,180,181,177,182,179,184,186,178,180,181,180,182,184,0,180],"f":[0,0,0,[[],1],[[2,3],[[1,[4]]]],[[2,3],[[1,[4]]]],0,[2,2],0,[2,[[1,[5]]]],0,0,0,0,[[2,3],[[6,[2,3]]]],[[2,3],[[1,[7]]]],[[2,3],1],[2,[[8,[2]]]],[[],7],0,[[2,3],[[9,[2,3]]]],[[2,10],[[11,[2,10]]]],[[2,10],[[12,[2,10]]]],0,[[],[[1,[7]]]],[5,[[1,[7]]]],0,[[2,3],[[1,[[7,[5]]]]]],0,0,[[]],[[2,5],[[13,[2]]]],[[2,3],[[14,[2,3]]]],0,[[2,5],[[15,[2]]]],[[2,3],[[16,[2,3]]]],0,0,[[[19,[[18,[17]]]]],20],[21,20],[[[18,[17]],20]],[[[18,[17]],20],4],[[22,[0,[23,24]],[25,[17]]],[[1,[26]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[27,27],[28,28],[29,29],[30,30],[31,31],[[]],[[]],[[]],[[]],[[]],[[28,[18,[17]],[25,[17]]],32],[29,33],[30,17],[31,34],[[27,[18,[17]],[18,[17]]],32],[[],29],[[],30],[[],31],[[27,27],4],[[28,28],4],[[29,29],4],[[30,30],4],[[31,31],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[27,35],36],[[28,35],36],[[29,35],36],[[30,35],36],[[31,35],36],[28,27],[[]],[[]],[[]],[[]],[[]],[[27,37]],[[28,37]],[[29,37]],[[30,37]],[[31,37]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[38,[[1,[27]]]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[33,[[1,[29,26]]]],[17,[[1,[30,26]]]],[34,[[1,[31,26]]]],[[],39],[[],39],[[],39],[[],39],[[],39],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[40,40],[[[43,[[0,[41,42]]]]],[[43,[[0,[41,42]]]]]],[44,44],[[[45,[[0,[42,41]]]]],[[45,[[0,[42,41]]]]]],[[[46,[41,[0,[41,42]],[0,[41,42]]]]],[[46,[41,[0,[41,42]],[0,[41,42]]]]]],[[[47,[41]]],[[47,[41]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[40,40],4],[[[43,[[0,[48,42]]]],[43,[[0,[48,42]]]]],4],[[44,44],4],[[],4],[[],4],[[],4],[[49,35],36],[[40,35],36],[[[43,[[0,[50,42]]]],35],36],[[51,35],36],[[44,35],36],[[[45,[[0,[42,50]]]],35],36],[[[52,[[0,[42,50]]]],35],36],[[[53,[[0,[21,50]],50]],35],36],[[54,35],36],[[[46,[50,[0,[50,42]],[0,[50,42]]]],35],36],[[[47,[50]],35],36],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[40,4],[[[43,[42]]],4],[44,4],[[[45,[42]]],4],[40,5],[[[43,[42]]],5],[44,5],[[[45,[42]]],5],[55,[[1,[[56,[21]],26]]]],[[42,[58,[57]]],[[43,[42]]]],[[[18,[17]],5],51],[[42,5],[[45,[42]]]],[42,[[52,[42]]]],[[42,42],[[46,[42,42]]]],[[[58,[57]]],47],[[[43,[42]]],7],[51,7],[[[45,[42]]],7],[[[52,[59]]],7],[[[46,[42,42]]],7],[[[47,[42]]],7],[[],5],[[[45,[42]]],5],[51],[[[45,[42]]]],[[[52,[59]]]],[[[46,[42,42]]]],[[[47,[42]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[55,7],[[1,[60,26]]]],[[55,7],[[1,[61,26]]]],[55,[[1,[49,26]]]],[[55,7],[[1,[[53,[21]],26]]]],[55,[[1,[54,26]]]],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[5,5],[62,62],[[]],0,0,0,[[62,62],4],[[],4],[[62,35],36],[[]],[[[18,[17]]],[[7,[5]]]],[[62,37]],0,[[]],0,[[]],[63,[[1,[62]]]],[[],1],[[],1],[[],39],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[[65,[[0,[41,64]]]]],[[65,[[0,[41,64]]]]]],[[]],[[[18,[64]],5,[18,[17]]]],[[[18,[64]],5,[18,[17]]]],[[[65,[[0,[50,64]]]],35],36],[[]],[[]],[[]],[[[65,[64]]],7],[[5,[18,[17]]]],[[[65,[64]]]],[[]],[[],1],[[],1],[[[18,[17]],5,5],[[1,[[65,[64]],26]]]],[[],39],[[[18,[17]],5]],[[]],[[]],0,[[]],[[]],[66,5],[[42,[25,[17]]]],[[66,35],36],[[]],[[]],[[]],[66,7],[66],[[],1],[[],1],[[[18,[17]]],[[1,[66,26]]]],[[],39],0,[[]],[[]],[[[0,[42,41]],[25,[17]]]],[[67,35],36],[[]],[[]],[[]],[67,[[1,[68,26]]]],[67,7],[[],1],[[],1],[[[18,[17]]],[[1,[67,26]]]],[[],39],0,[[]],[[]],[[[0,[42,41]],[25,[17]]]],[[68,35],36],[[]],[[]],[[]],[68,[[18,[17]]]],[68,7],[[],1],[[],1],[[[18,[17]]],[[1,[68,26]]]],[[],39],[68,[[18,[17]]]],0,0,0,0,0,0,[[69,42],70],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[71,71],[72,72],[73,73],[[]],[[]],[[]],[[69,42],70],[[69,42,33],70],[[72,72],4],[[],4],[[74,35],36],[[71,35],36],[[72,35],36],[[73,35],36],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[18,[17]],5,5],74],[[[18,[17]],5],71],[74,7],[71,7],[73,7],[71,5],[74],[73],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[[18,[17]],33,5],[[1,[73,26]]]],[[],39],[[],39],[[],39],[[],39],0,[[]],[[]],[[75,35],36],[[]],[[]],[[]],[[[18,[17]],[7,[5]]],75],[75,7],[75],[[],1],[[],1],[[],39],[[[18,[17]]],[[1,[26]]]],[[20,[18,[17]]],5],[[[18,[17]]],[[1,[26]]]],[76],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[77,77],[26,26],[[]],[[]],[[77,77],4],[[],4],[[77,35],36],[[26,35],36],[[26,35],36],[[]],[78,26],[79,26],[80,26],[81,26],[[]],[82,26],[83,26],[[77,37]],[[]],[[]],[[]],[[]],[[],84],[[],1],[[],1],[[],1],[[],1],[[],39],[[],39],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],85],[[[86,[21]]],85],[87,85],[88,85],[89,85],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[90,90],[[[86,[[0,[41,21]]]]],[[86,[[0,[41,21]]]]]],[[[91,[41]]],[[91,[41]]]],[87,87],[88,88],[89,89],[57,57],[92,92],[93,93],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[90,90],94],0,[[[18,[4]],[18,[90]],5],[[1,[[25,[57]],26]]]],[[],93],[[95,95],4],[[90,90],4],[[[86,[[0,[48,21]]]],[86,[[0,[48,21]]]]],4],[[[91,[48]],[91,[48]]],4],[[87,87],4],[[88,88],4],[[89,89],4],[[57,57],4],[[92,92],4],[[93,93],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],0,[[90,35],[[1,[96]]]],[[[86,[[0,[50,21]]]],35],36],[[[91,[50]],35],36],[[87,35],36],[[88,35],36],[[89,35],36],[[57,35],36],[[92,35],36],[[93,35],36],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[90,37]],[[[86,[[0,[97,21]]]],37]],[[[91,[97]],37]],[[87,37]],[[88,37]],[[89,37]],[[57,37]],[[92,37]],[[93,37]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[76,34,76],90],[[5,5],57],0,0,0,[[90,90],[[7,[94]]]],[[],98],[[[86,[21]]],98],[87,98],[88,98],[89,98],0,0,0,[99,[[1,[90,80]]]],[99,[[1,[90,80]]]],[[[18,[57]],[18,[90]],5],[[1,[[25,[92]],26]]]],0,0,0,[100,101],[100,[[104,[[103,[101,102]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[105,[[1,[93]]]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[90,106],[[1,[5,80]]]],[[90,107],101],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[22],[108,108],[109,109],[22,22],[110,110],[111,111],[112,112],[113,113],[114,114],[115,115],[116,116],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[108,108],94],[[109,109],94],[22,117],[22,[[25,[63]]]],[[113,5],112],0,0,[114,[[18,[22]]]],[115,[[18,[111]]]],[22,76],[114,5],[22,27],0,0,[22,76],[22,111],0,[22,[[7,[76]]]],0,[[108,108],4],[[109,109],4],[[110,110],4],[[111,111],4],[[112,112],4],[[116,116],4],[[],4],[[],4],[[],4],[[],4],[[],4],[115,[[18,[118]]]],[22,76],[22,[[7,[84]]]],[[108,35],[[1,[96]]]],[[109,35],[[1,[96]]]],[[22,35],36],[[110,35],36],[[111,35],36],[[112,35],36],[[113,35],36],[[114,35],36],[[115,35],36],[[116,35],36],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[7,[119]],[7,[120]],98],116],[22,4],[[108,37]],[[109,37]],[[110,37]],[22,[[7,[76]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[22,117],[113,109],0,[113,[[7,[[25,[108]]]]]],0,0,0,0,[22,121],[115,122],[[84,[123,[[7,[84]]]]],108],[[34,[25,[124,102]],76,[25,[125,102]],[123,[[7,[[25,[108,102]]]]]],[123,[[7,[84]]]],[123,[[7,[[25,[126,102]]]]]],[123,[[7,[127]]]],[123,[[7,[[25,[17,102]]]]]]],109],[[117,111],22],[[110,[25,[84]],118],111],[[[25,[22]],5,5],114],[[84,[25,[118]]],115],[114,5],0,0,[22,76],[[108,108],[[7,[94]]]],[[109,109],[[7,[94]]]],0,[22,98],0,[99,[[1,[108,80]]]],[99,[[1,[108,80]]]],[99,[[1,[109,80]]]],[99,[[1,[109,80]]]],0,0,[113,115],0,0,[112,116],[22,[[7,[[32,[[129,[128]]]]]]]],[100,[[104,[[103,[101,102]]]]]],[100,101],[100,101],[100,[[104,[[103,[101,102]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[114,5],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[122,[[32,[115]]]],[109,[[1,[113,26]]]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[22,76],0,0,0,[[108,106],[[1,[5,80]]]],[[109,106],[[1,[5,80]]]],[[108,107],101],[[109,107],101],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[55,[[18,[17]]]],0,[55,[[25,[17]]]],[130,[[25,[17]]]],[131,131],[132,132],[133,133],[134,134],[55,55],[135,135],[[]],[[]],[[]],[[]],[[]],[[]],[[131,131],94],[[132,132],94],[[133,133],94],0,[136,5],[136,27],[137,27],0,0,0,[[],62],[131,62],[132,62],[55,62],0,0,0,0,[[],62],[131,62],[132,62],[55,62],0,0,[[131,131],4],[[132,132],4],[[133,133],4],[[135,135],4],[[],4],[[],4],[[],4],[[],4],[[131,35],[[1,[96]]]],[[132,35],[[1,[96]]]],[[133,35],[[1,[96]]]],[[136,35],36],[[134,35],36],[[55,35],36],[[130,35],36],[[138,35],36],[[139,35],36],[[137,35],36],[[135,35],36],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[131,37]],[[132,37]],[[133,37]],[[135,37]],[136,134],[55,134],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[138,4],0,0,0,[[34,63,63,63,[123,[[7,[140]]]]],131],[[34,34,34,63,34,34,[123,[[7,[4]]]],[123,[[7,[140]]]]],132],[[141,34,34,[123,[[7,[34]]]],[123,[[7,[131]]]],[123,[[7,[142]]]],[123,[[7,[143]]]],[123,[[7,[132]]]]],133],[[134,[25,[17]],27,5,110,[7,[5]]],136],[[134,[25,[17]],110,[7,[5]]],55],[[[25,[17]],5,4],139],[[[25,[17]],27,5,5,4],137],0,0,[136,5],[134,5],[55,5],0,0,0,[[131,131],[[7,[94]]]],[[132,132],[[7,[94]]]],[[133,133],[[7,[94]]]],[99,[[1,[131,80]]]],[99,[[1,[131,80]]]],[99,[[1,[132,80]]]],[99,[[1,[132,80]]]],[99,[[1,[133,80]]]],[99,[[1,[133,80]]]],[[],62],[131,62],[132,62],[55,62],0,0,[[136,[25,[57]]]],[136,[[7,[[18,[57]]]]]],[55,[[7,[[18,[57]]]]]],0,[55,32],[[[18,[17]],4,4],32],[[[18,[17]],5,5],32],[136,[[7,[[32,[[129,[128]]]]]]]],[55,[[7,[[32,[[129,[128]]]]]]]],0,0,[100,[[104,[[103,[101,102]]]]]],[100,101],[100,[[104,[[103,[101,102]]]]]],[100,101],[100,101],[100,[[104,[[103,[101,102]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[141,[[1,[135]]]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],0,[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],0,[136,5],[[131,106],[[1,[5,80]]]],[[132,106],[[1,[5,80]]]],[[133,106],[[1,[5,80]]]],[[131,107],101],[[132,107],101],[[133,107],101],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[1,[144]]]],[[[145,[[0,[23,24]]]]],[[1,[[144,[[145,[[0,[23,24]]]]]],26]]]],[[[147,[146]]],32],[[[148,[42]]],32],[149,[[1,[[144,[149]],26]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[150,150],[[]],0,0,[[138,[25,[17]]],[[32,[130]]]],0,[[23,5],[[32,[113]]]],[[150,150],4],[[],4],[[113,10],113],[[[144,[50]],35],36],[[149,35],36],[[150,35],36],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[22,150],[[]],[[],7],[[[145,[[0,[23,24]]]]],7],[[[147,[146]]],7],[[[148,[42]]],7],[149,7],[[[0,[23,24]],114,122,[7,[151]],[25,[17]],5],[[145,[[0,[23,24]]]]]],[[[18,[22]],122],42],[[22,[0,[23,24]],[7,[151]],[25,[17]],5],[[32,[[152,[[0,[23,24]]]]]]]],[[22,[0,[153,154,155,156]],[25,[17]],151,5],[[32,[157]]]],[[22,[0,[153,154,155]],[25,[17]],151,5],[[32,[157]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[147,[146]]]],[[[148,[42]]],[[25,[17]]]],[[[158,[[0,[23,24]]]]]],[[[152,[23]]]],[[]],[[]],0,[[[0,[23,24]],[25,[22]],[7,[151]],[25,[17]],5],[[145,[[0,[23,24]]]]]],[[146,[25,[17]]],[[147,[146]]]],[[42,[25,[17]]],[[148,[42]]]],[[[0,[23,24]],22,[25,[92]],[25,[17]],[25,[17]]],[[158,[[0,[23,24]]]]]],[[23,22,151,[25,[17]],5],[[152,[23]]]],[[118,25],149],[[20,76,27,110],150],[[[0,[23,24]],150,[25,[92]],[25,[17]],[25,[17]]],[[158,[[0,[23,24]]]]]],[[23,150,151,[25,[17]],5],[[152,[23]]]],[[[158,[[0,[23,24]]]]],7],[[[152,[23]]],7],0,[[[0,[23,24]],22],[[1,[[25,[17]],26]]]],[[10,22],[[1,[[25,[17]],26]]]],[[[0,[23,24]],[18,[22]],122],[[1,[25,26]]]],[[[0,[10,41]],[18,[22]],122],[[1,[25,26]]]],[[[0,[23,24]],[18,[22]]],[[1,[[25,[[103,[95]]]],26]]]],[[[0,[23,24]]],[[32,[113]]]],[[[0,[153,156,155,154]]],[[32,[113]]]],[[[0,[23,24]],20],[[32,[113]]]],[[[0,[23,24]],[18,[22]]],[[1,[[25,[[25,[90]]]],26]]]],[[[25,[17]]]],[[[152,[23]],[25,[17]]]],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[159,33],0,0,0,0,0,[[]],[[]],[[]],[[]],[124,124],[160,160],[[]],[[]],[[124,124],94],0,[[124,124],4],[[160,160],4],[[],4],[[],4],0,[[124,35],[[1,[96]]]],[[160,35],36],[[]],[[]],[[124,37]],[[160,37]],[[]],[[]],0,0,0,0,[[[123,[[7,[161]]]],[123,[[7,[34]]]],[123,[[7,[162]]]],84,[123,[[7,[34]]]],[123,[[7,[163]]]],[123,[[7,[34]]]],[123,[[7,[34]]]],[123,[[7,[34]]]],[123,[[7,[164]]]]],124],0,[[124,124],[[7,[94]]]],0,[99,[[1,[124,80]]]],[99,[[1,[124,80]]]],0,0,[100,101],[100,[[104,[[103,[101,102]]]]]],[[]],[[]],[[],1],[[],1],[162,[[1,[160]]]],[[],1],[[],1],0,[[],39],[[],39],0,0,[[124,106],[[1,[5,80]]]],[[124,107],101],[122,[[32,[118]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[118,118],4],[165,165],[166,166],[119,119],[167,167],[98,98],[168,168],[120,120],[169,169],[170,170],[118,118],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[165,165],4],[[166,166],4],[[119,119],4],[[167,167],4],[[98,98],4],[[168,168],4],[[120,120],4],[[169,169],4],[[170,170],4],[[118,118],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],0,[[165,35],36],[[166,35],36],[[119,35],36],[[167,35],36],[[98,35],36],[[168,35],36],[[120,35],36],[[169,35],36],[[170,35],36],[[118,35],36],[[]],[171,165],[[]],[[],166],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[84,[25,[118]],160,[7,[169]],[7,[34]]],118],[[84,160,[7,[169]],[7,[167]],[25,[118]],[7,[34]]],118],[[84,98],170],[[84,98],118],[118,168],[[165,37]],[[166,37]],[[119,37]],[[167,37]],[[98,37]],[[168,37]],[[120,37]],[[169,37]],[[170,37]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[118,122],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],1],[164,[[1,[119]]]],[164,[[1,[167]]]],[[],1],[[],[[1,[98]]]],[[],1],[[],1],[[],1],[[],[[1,[120]]]],[163,[[1,[169]]]],[[],1],[[],1],[[],1],[[84,98,160,[7,[120]],[7,[119]],[7,[34]]],[[32,[118]]]],[[[18,[124]]],[[32,[118]]]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],85],[172,85],[173,85],[174,85],[[[175,[21]]],85],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[140,140],[172,172],[173,173],[174,174],[[[175,[[0,[41,21]]]]],[[175,[[0,[41,21]]]]]],[[]],[[]],[[]],[[]],[[]],[[140,140],94],[[140,170],[[32,[[129,[128]]]]]],0,0,0,0,0,[[140,140],4],[[128,128],4],[[172,172],4],[[173,173],4],[[174,174],4],[[[175,[[0,[48,21]]]],[175,[[0,[48,21]]]]],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[140,35],[[1,[96]]]],[[172,35],36],[[173,35],36],[[174,35],36],[[[175,[[0,[50,21]]]],35],36],[[]],[[]],[[]],[[]],[[]],[[140,37]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[[123,[[7,[[25,[17,102]]]]]],[123,[[7,[[25,[17,102]]]]]],[123,[[7,[76]]]],[123,[[7,[76]]]],[123,[[7,[[25,[17,102]]]]]],[123,[[7,[[25,[17,102]]]]]]],140],[[],[[7,[76]]]],[172,[[7,[76]]]],[173,[[7,[76]]]],[174,[[7,[76]]]],[[[175,[21]]],[[7,[76]]]],0,0,0,0,0,[[140,140],[[7,[94]]]],[[],98],[172,98],[173,98],[174,98],[[[175,[21]]],98],0,0,0,[99,[[1,[140,80]]]],[99,[[1,[140,80]]]],[128,140],[100,101],[100,[[104,[[103,[101,102]]]]]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],39],[[],39],[[],39],[[],39],[[],39],[[140,106],[[1,[5,80]]]],[[140,107],101],0,0,0,[[[18,[17]]],21],[[]],[[[176,[33]]],76],[[],94],[[[18,[17]],[18,[17]]],94],[[]],0,0,0,0,0,0,0,0,0,0,0,[[[177,[42]]],1],[178,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[179,[[7,[76]]]],[180,180],[181,181],[[]],[[]],[[130,[25,[17]],28],[[32,[138]]]],0,0,[[[182,[69]],[7,[[25,[108]]]]],[[32,[20]]]],[[[184,[[0,[183,154,155]]]],[7,[[25,[108]]]]],[[32,[20]]]],[[180,180],4],[[181,181],4],[[],4],[[],4],[[180,35],36],[[181,35],36],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[117,179],[22,179],[[[177,[42]]],7],[178,7],[[180,37]],[[181,37]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[177,[42]]]],[[[182,[69]]],69],[[[184,[[0,[183,154,155]]]]],[[0,[183,154,155]]]],[[[182,[69]]]],[[]],[[[182,[69]]],[[7,[109]]]],[[42,28,[25,[17]]],[[177,[42]]]],[[69,115,180,[7,[84]]],[[182,[69]]]],[[[0,[183,154,155]],115,180,[7,[84]]],[[184,[[0,[183,154,155]]]]]],[[[0,[42,155,185]]],186],[[[0,[187,155,185]]],178],[[42,28,[25,[17]]],[[177,[42]]]],[186,7],[[[182,[69]]],180],[[[184,[[0,[183,154,155]]]]],180],[[[182,[69]]],115],[[[184,[[0,[183,154,155]]]]],115],[186],[178],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],0,[[[182,[69]],[189,[188]]],32],[[[184,[[0,[183,154,155]]]],[189,[188]]],32],[[69,109],[[32,[20]]]],0],"c":[],"p":[[4,"Result",1903],[8,"Sized",1904],[8,"FnMut",1905],[15,"bool"],[15,"usize"],[3,"Filter",1906],[4,"Option",1907],[3,"Fuse",1906],[3,"Map",1906],[8,"Fn",1905],[3,"MapErr",1906],[3,"MapRef",1906],[3,"Skip",1906],[3,"SkipWhile",1906],[3,"Take",1906],[3,"TakeWhile",1906],[15,"u8"],[15,"slice"],[8,"AsRef",1908],[15,"u64"],[8,"NativeType",1777],[3,"ColumnChunkMetaData",780],[8,"Read",1909],[8,"Seek",1909],[3,"Vec",1910],[4,"Error",545],[4,"Compression",43],[4,"CompressionOptions",43],[3,"BrotliLevel",43],[3,"GzipLevel",43],[3,"ZstdLevel",43],[6,"Result",545],[15,"u32"],[15,"i32"],[3,"Formatter",1911],[6,"Result",1911],[8,"Hasher",1912],[3,"CompressionCodec",1913],[3,"TypeId",1914],[4,"FilteredHybridEncoded",147],[8,"Clone",1915],[8,"Iterator",1916],[3,"FilteredHybridBitmapIter",147],[4,"HybridEncoded",147],[3,"HybridRleIter",147],[3,"OptionalValues",147],[3,"SliceFilteredIter",147],[8,"PartialEq",1917],[4,"BooleanPageState",147],[8,"Debug",1911],[3,"FixexBinaryIter",147],[3,"HybridRleBooleanIter",147],[4,"NativePageState",147],[4,"DefLevelsDecoder",147],[3,"DataPage",998],[6,"Casted",147],[3,"Interval",593],[3,"VecDeque",1918],[8,"HybridRleRunsIterator",147],[4,"BinaryPageState",147],[4,"FixedLenBinaryPageState",147],[4,"Encoding",356],[3,"Encoding",1913],[8,"Unpackable",391],[3,"Decoder",391],[3,"Decoder",420],[3,"Decoder",435],[3,"Decoder",449],[8,"Write",1909],[6,"Result",1919],[3,"Decoder",464],[4,"HybridEncoded",464],[3,"HybridRleDecoder",464],[3,"BitmapIter",464],[3,"BinaryIter",528],[15,"i64"],[4,"Feature",545],[3,"TryReserveError",1920],[3,"Error",1919],[4,"Error",1921],[3,"TryFromSliceError",1922],[3,"TryFromIntError",1923],[4,"Error",1924],[3,"String",1925],[8,"Any",1914],[3,"NativeIndex",593],[3,"ByteIndex",593],[3,"FixedLenByteIndex",593],[3,"BooleanIndex",593],[3,"PageLocation",593],[3,"PageIndex",593],[3,"FilteredPage",593],[4,"BoundaryOrder",593],[4,"Ordering",1917],[8,"Index",593],[3,"Error",1911],[8,"Hash",1912],[4,"PhysicalType",1418],[8,"TInputProtocol",1926],[8,"TInputStreamProtocol",1927],[8,"Future",1928],[3,"Global",1929],[3,"Box",1930],[3,"Pin",1931],[3,"BoundaryOrder",1913],[8,"TOutputProtocol",1926],[8,"TOutputStreamProtocol",1927],[3,"KeyValue",780],[3,"ThriftFileMetaData",780],[3,"Descriptor",780],[3,"ColumnDescriptor",780],[4,"ColumnOrder",780],[3,"FileMetaData",780],[3,"RowGroupMetaData",780],[3,"SchemaDescriptor",780],[4,"SortOrder",780],[3,"ColumnChunk",1913],[4,"ParquetType",1418],[4,"PrimitiveLogicalType",1418],[4,"PrimitiveConvertedType",1418],[3,"ColumnMetaData",1913],[15,"str"],[8,"Into",1908],[3,"SchemaElement",1361],[3,"RowGroup",1913],[4,"ColumnOrder",1913],[4,"EncryptionAlgorithm",1913],[8,"Statistics",1653],[3,"Arc",1932],[4,"Page",998],[3,"DataPageHeaderV1",998],[3,"DataPageHeaderV2",998],[3,"ParquetPageHeader",998],[4,"DataPageHeader",998],[4,"PageType",998],[3,"CompressedDataPage",998],[3,"CompressedDictPage",998],[4,"CompressedPage",998],[3,"DictPage",998],[3,"ParquetStatistics",1653],[3,"PageType",1913],[3,"IndexPageHeader",1913],[3,"DictionaryPageHeader",1913],[4,"State",1229],[3,"ColumnIterator",1229],[8,"PageIterator",1229],[3,"Decompressor",1229],[3,"BasicDecompressor",1229],[3,"ReadColumnIterator",1229],[3,"PageMetaData",1229],[6,"PageFilter",1229],[3,"PageReader",1229],[8,"AsyncRead",1933],[8,"Unpin",1904],[8,"Send",1904],[8,"AsyncSeek",1933],[8,"Stream",1934],[3,"IndexedPageReader",1229],[15,"i16"],[4,"Repetition",1361],[3,"Type",1913],[3,"FieldRepetitionType",1913],[3,"ConvertedType",1913],[4,"LogicalType",1913],[4,"TimeUnit",1418],[4,"IntegerType",1418],[4,"GroupLogicalType",1418],[3,"FieldInfo",1418],[4,"GroupConvertedType",1418],[3,"PrimitiveType",1418],[4,"TimeUnit",1913],[3,"BinaryStatistics",1653],[3,"BooleanStatistics",1653],[3,"FixedLenStatistics",1653],[3,"PrimitiveStatistics",1653],[15,"array"],[3,"Compressor",1786],[3,"DynStreamingIterator",1786],[3,"ColumnOffsetsMetadata",1786],[3,"WriteOptions",1786],[4,"Version",1786],[3,"FileWriter",1786],[8,"AsyncWrite",1933],[3,"FileStreamer",1786],[8,"Sync",1904],[3,"DynIter",1786],[8,"FallibleStreamingIterator",0],[8,"Error",1935],[6,"RowGroupIter",1786],[13,"Repeated",351],[13,"Bitmap",351],[8,"Packed",391],[8,"Unpacked",391],[8,"DataPageHeaderExt",998],[8,"MutStreamingIterator",1229],[13,"GroupType",1645],[13,"Time",1649],[13,"Timestamp",1649]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
